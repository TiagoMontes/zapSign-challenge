from __future__ import annotations

from typing import Iterable, Optional, Protocol

from core.domain.entities.company import Company as CompanyEntity
from core.domain.entities.document import Document as DocumentEntity
from core.domain.entities.signer import Signer as SignerEntity


class CompanyRepositoryProtocol(Protocol):
    def create(self, company: CompanyEntity) -> CompanyEntity: ...

    def get_by_id(self, company_id: int) -> Optional[CompanyEntity]: ...

    def list(self) -> Iterable[CompanyEntity]: ...

    def delete(self, company_id: int) -> None: ...


class DocumentRepositoryProtocol(Protocol):
    def create(self, document: DocumentEntity) -> DocumentEntity: ...

    def assign_signers(self, document_id: int, signer_ids: list[int]) -> DocumentEntity: ...

    def get_by_id(self, document_id: int) -> Optional[DocumentEntity]: ...

    def list(self) -> Iterable[DocumentEntity]: ...

    def delete(self, document_id: int) -> None: ...


class SignerRepositoryProtocol(Protocol):
    def create(self, signer: SignerEntity) -> SignerEntity: ...

    def get_by_id(self, signer_id: int) -> Optional[SignerEntity]: ...

    def list(self) -> Iterable[SignerEntity]: ...

    def delete(self, signer_id: int) -> None: ...

